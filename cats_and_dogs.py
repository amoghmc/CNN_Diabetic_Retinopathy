# -*- coding: utf-8 -*-
"""cats_and_dogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tJECDm55qHvufl8kA3BJehxeGKHwaTY6
"""

# Source of original code: https://www.analyticsvidhya.com/blog/2020/08/top-4-pre-trained-models-for-image-classification-with-python-code/

# import basic libraries

import os 
import zipfile 
import tensorflow as tf

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers
from tensorflow.keras import Model
import matplotlib.pyplot as plt

"""
# assign local_zip to saved zipfile
local_zip = 'cats_and_dogs_filtered.zip'
# create zipfile obj to read zipfile
zip_ref = zipfile.ZipFile(local_zip, 'r')
# extract contents to tmp directory
zip_ref.extractall()
# close zipfile obj
zip_ref.close()
"""

base_dir = 'cats_and_dogs_filtered'

# cats_and_dogs_filtered/train
train_dir = os.path.join(base_dir, 'train')
# cats_and_dogs_filtered/validation
validation_dir = os.path.join(base_dir, 'validation')

# Directory with our training cat pictures
# cats_and_dogs_filtered/train/cats
train_cats_dir = os.path.join(train_dir, 'cats')

# Directory with our training dog pictures
# cats_and_dogs_filtered/train/dogs
train_dogs_dir = os.path.join(train_dir, 'dogs')

# Directory with our validation cat pictures
# cats_and_dogs_filtered/validation/cats
validation_cats_dir = os.path.join(validation_dir, 'cats')

# Directory with our validation dog pictures
# cats_and_dogs_filtered/validation/dogs
validation_dogs_dir = os.path.join(validation_dir, 'dogs')

# Set up matplotlib fig, and size it to fit 4x4 pics
import matplotlib.image as mpimg
nrows = 4
ncols = 4

# gets current figure of plt
fig = plt.gcf()
# sets width and height of each image in inches
fig.set_size_inches(ncols*4, nrows*4)
# a random pic index
pic_index = 100

# gets a list of all cat images in train_cat_directory
train_cat_fnames = os.listdir( train_cats_dir )
# gets a list of all dog images in train_dog_directory
train_dog_fnames = os.listdir( train_dogs_dir )

# gets list of next cat pics
# by joining filename with directory
next_cat_pix = [os.path.join(train_cats_dir, fname)
                for fname in train_cat_fnames[ pic_index-8:pic_index]
               ]

# gets list of next dog pics
# by joining filename with directory
next_dog_pix = [os.path.join(train_dogs_dir, fname)
                for fname in train_dog_fnames[ pic_index-8:pic_index]
               ]

# enumerate converts a list to a list of tuples ie [(0, cat001.jpg), (1, cat002.jpg)]
for i, img_path in enumerate(next_cat_pix+next_dog_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

# displays plot
plt.show()

# Add our data-augmentation parameters to ImageDataGenerator
# Generate batches of tensor image data with real-time data augmentation.
train_datagen = ImageDataGenerator(rescale = 1./255., rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2,shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)
test_datagen = ImageDataGenerator( rescale = 1.0/255. )

# Takes the path to a directory & generates batches of augmented data.
train_generator = train_datagen.flow_from_directory(train_dir, batch_size = 20, class_mode = 'binary', target_size = (150, 150))
validation_generator = test_datagen.flow_from_directory(validation_dir, batch_size = 20, class_mode = 'binary', target_size = (150, 150))

# Instantiates the Inception v3 architecture.
# We will be using only the basic models, with changes made only to the final layer.
# This is because this is just a binary classification problem while these models are built to handle up to 1000 classes.
from tensorflow.keras.applications.inception_v3 import InceptionV3
base_model = InceptionV3(input_shape = (150, 150, 3), include_top = False, weights = 'imagenet')

# Since we donâ€™t have to train all the layers, we make them non-trainable
for layer in base_model.layers:
    layer.trainable = False

from tensorflow.keras.optimizers import RMSprop

# Flatten the output of our base model to 1 dimension
x = layers.Flatten()(base_model.output)
# Add a fully connected layer with 1,024 hidden units and ReLU activation
x = layers.Dense(1024, activation='relu')(x)
# Add a dropout rate of 0.2
x = layers.Dropout(0.2)(x)
# Add a final sigmoid layer with 1 node for classification output
x = layers.Dense(1, activation='sigmoid')(x)

model = tf.keras.models.Model(base_model.input, x)

model.compile(optimizer = RMSprop(learning_rate=0.0001), loss = 'binary_crossentropy', metrics = ['acc'])

# show epoc result
inc_history = model.fit(train_generator, validation_data = validation_generator, steps_per_epoch = 100, epochs = 10)


